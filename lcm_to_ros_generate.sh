#!/usr/bin/env bash

mkdir -p msg autosrc launch

echo "" > autosrc/CMakeLists.txt
LAUNCH_FILE="launch/all_republishers.launch"

LCM_TYPES=(int8_t int16_t int32_t int64_t float   double  string boolean byte)
ROS_TYPES=(int8   int16   int32   int64   float32 float64 string bool byte)

N_TYPES=${#LCM_TYPES[@]}

echo  "<launch>" > $LAUNCH_FILE
echo -e "\t<master auto=\"start\" />" >> $LAUNCH_FILE
echo -e "\t<group ns=\"lcm_to_ros\">" >>  $LAUNCH_FILE

for INFILE in lcm/*.lcm
do
    echo "Processing LCM message file: $INFILE"
    
    # Get the topic name, message type and package name
    TOPIC_NAME=$( echo $INFILE | sed 's:lcm/::; s/.lcm//')
    MESSAGE_TYPE=$(cat $INFILE | awk '/struct/ {print $2}')
    PACKAGE_NAME=$(cat $INFILE | awk -F'[ ;]' '/package/ {print $2}')
    
    # Check if the structre name == filename
    
    # if [ $MESSAGE_NAME != $TOPIC_NAME ]
    # then
    #     echo "ERROR! Structure name '$STRUCT_NAME' does not match filename '$MESSAGE_NAME'"
    #     echo "Edit the lcm file to ensure filename matches structure name and rerun"
    #     continue
    # fi        
    
    echo -n -e "\tCreating LCM CPP message header exlcm/$MESSAGE_TYPE.hpp ..."
    # Create lcm CPP header (in exlcm subfolder)
    lcm-gen -x $INFILE
    test $? != 0  && { echo "LCM conversion failed, skipping $INFILE"; continue; }
    
    echo "done."
    
    # Create corresponding ros message
    OUTFILE="msg/$MESSAGE_TYPE.msg"
    echo -n -e "\tCreating ROS message $OUTFILE..."
    echo $(printf '#%.0s' {1..71}) > $OUTFILE
    echo "# This message was automatically generated by the lcm_to_ros package" >>$OUTFILE
    echo "# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu" >>$OUTFILE
    echo -e "$(printf '#%.0s' {1..71})\n#" >>$OUTFILE
    echo "# Source message:    $MESSAGE_NAME.msg" >> $OUTFILE
    echo "# Creation:          $(date '+%c')" >> $OUTFILE
    echo -e "#\n$(printf '#%.0s' {1..71})" >>$OUTFILE
    # sed finds lines in braces {}, removes top and tail lines, leading whitespace and semicolons
    cat $INFILE | sed '/{/,/}/!d' | sed '1d; $d; s/^[ \t]*//; s/;//; ' > tmp
    # Convert datatypes
    for (( i=0; i<${N_TYPES}; i++ ))
    do
        sed -i "s/\b${LCM_TYPES[$i]}\b/${ROS_TYPES[$i]}/" tmp
    done
    # awk to extract array indices (if present)
    cat tmp | awk -F"[][ \t]"+ '{ 
        if (NF < 2)
            x=""
        else if (NF == 2)
            x=$1
        else {
            if ($3 ~ /^[0-9]*$/)
                x=$1"["$3"]"
            else 
                x=$1"[]"
        }; 
        printf "%-20s%s\n", x, $2}' >>$OUTFILE    
    rm tmp
    echo " done."
    
    OUTFILE="autosrc/${TOPIC_NAME}_republisher.cpp"
    echo -n -e "\tCreating CPP file $OUTFILE..."
    echo $(printf '/%.0s' {1..71}) > $OUTFILE
    echo "// This source was automatically generated by the lcm_to_ros package" >>$OUTFILE
    echo "// https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu" >>$OUTFILE
    echo -e "$(printf '/%.0s' {1..71})\n//" >>$OUTFILE
    echo "// Source message:    $MESSAGE_TYPE.msg" >> $OUTFILE
    echo "// Creation:          $(date '+%c')" >> $OUTFILE
    echo -e "//\n$(printf '/%.0s' {1..71})" >>$OUTFILE
    cat src/default_republisher.cpp.in | sed "s/@MESSAGE_TYPE@/$MESSAGE_TYPE/g" | \
        sed "s/@TOPIC_NAME@/$TOPIC_NAME/g; s/@PACKAGE_NAME@/$PACKAGE_NAME/g; " >> $OUTFILE
    echo " done."
    
    echo -n -e "\tAdding entry to autosrc/CMakeLists.txt ..."
    cat src/default_CMakeLists.txt.in | sed "s/@TOPIC_NAME@/$TOPIC_NAME/g" >> autosrc/CMakeLists.txt
    echo " done."
    
    echo -n -e "\tAdding entry to $LAUNCH_FILE ..."
    echo -e "\t\t<node pkg=\"lcm_to_ros\" type=\"${TOPIC_NAME}_republisher\" respawn=\"false\" name=\"${TOPIC_NAME}_republisher\" output=\"screen\"/>" >> $LAUNCH_FILE
    echo " done."
done

echo -e "\t</group>" >>  $LAUNCH_FILE
echo "</launch>" >> $LAUNCH_FILE
